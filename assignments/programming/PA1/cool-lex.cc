#line 2 "cool-lex.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <errno.h>

/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#ifndef _WIN32
#include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif


/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define FLEX_DEBUG
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;

#define FLEX_DEBUG
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 61
#define YY_END_OF_BUFFER 62
static yyconst short int yy_accept[272] =
    {   0,
        0,    0,   20,   20,    0,    0,   62,   61,   47,   15,
       49,   48,    3,    4,    7,    5,   12,    6,   11,    8,
       16,    9,   10,   14,   13,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,    1,   15,    2,
       20,   22,   21,   60,   51,   50,   61,   52,   19,   24,
       18,   16,   17,   25,   45,   45,   45,    0,   45,   45,
        0,   30,   30,   29,   31,   45,   29,   45,   45,    0,
       45,   45,    0,   41,   41,   45,    0,   45,    0,   45,
        0,   46,   46,   46,   46,   46,   46,   30,   30,   29,

       31,   46,   46,   46,   46,   46,   41,   46,   46,   46,
        0,   46,    0,    0,   29,    0,    0,   31,    0,    0,
       29,   20,   21,    0,   21,   60,   59,   58,   56,   57,
       53,   55,   54,   18,   45,    0,   45,    0,    0,   45,
        0,   45,    0,    0,   45,    0,   45,    0,    0,   33,
       33,   45,    0,   33,   40,   40,   42,   42,   40,   45,
        0,   45,    0,   45,    0,   46,   46,   46,   46,   46,
        0,   46,   46,   33,   46,   40,   42,   46,   46,   46,
        0,    0,   46,   33,    0,    0,    0,   42,    0,    0,
        0,   33,   33,   23,   38,   38,   45,    0,   38,   28,

       28,   39,   39,   28,   45,    0,   45,    0,    0,   34,
       34,   35,   35,   36,   36,   45,    0,   38,   46,   28,
       39,   46,    0,   46,   46,   34,   35,   36,   43,   43,
       36,   46,   36,   28,   34,   39,   39,   28,   28,   35,
       28,   26,   26,   45,    0,   45,    0,    0,   37,   37,
       26,   44,   44,   46,   46,   37,   26,   45,    0,   32,
       32,   32,   46,   32,   45,    0,   46,   27,   27,   27,
        0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    1,    1,    1,    1,
        1,    2,    1,    5,    1,    1,    1,    1,    6,    7,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   17,   18,   19,
       20,   21,    1,    1,   22,   23,   24,   25,   26,   27,
       23,   28,   29,   23,   23,   30,   23,   31,   32,   33,
       23,   34,   35,   36,   37,   38,   39,   23,   23,   23,
        6,   40,    6,    1,   41,    1,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   48,   48,   51,   48,   52,
       53,   54,   48,   55,   56,   57,   58,   59,   60,   48,
       48,   48,   61,   62,   63,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[65] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    1,    4,    1,
        1,    1,    1,    1,    5,    5,    1,    1,    1,    1,
        1,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    3,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        1,    1,    1,    1
    } ;

static yyconst short int yy_base[281] =
    {   0,
        0,    0,   62,   63,   64,   65,  134,  788,  788,  788,
      788,  788,  118,  788,   85,  788,  788,   78,  788,  788,
       58,  788,  788,   76,   65,    0,   55,   45,   49,   56,
       63,   68,   75,   78,   64,   70,    0,   93,  103,  114,
      115,  126,  134,  121,  129,  135,  145,  788,  186,  788,
        0,  788,   73,    0,  788,  788,  204,    0,  788,  788,
        0,  159,  788,  788,    0,   85,  163,  164,   89,  167,
      188,    0,  788,    0,  196,  119,  203,  165,  202,  217,
      207,  218,  221,    0,  788,  231,  234,  242,  245,  244,
      247,    0,  254,  250,  255,  260,  268,    0,  269,    0,

      272,  265,  278,  276,  266,  279,    0,  286,  287,  288,
      306,  294,  307,  315,  788,  332,  325,  317,  323,  348,
      389,    0,  184,   81,  194,    0,  788,  788,  788,  788,
      788,  788,  788,    0,  311,  357,  336,  339,  358,  370,
      397,  364,  378,  410,  404,  407,  405,  409,  429,    0,
      788,  411,  414,  424,    0,  788,    0,  788,  788,  430,
      433,  446,  448,  434,  450,  444,  453,  457,  463,  458,
      462,  476,  473,    0,  478,    0,    0,  483,  485,  495,
      497,  502,  499,  788,  500,  520,  509,  523,  543,  544,
      532,  788,  583,  788,    0,  788,  530,  535,  537,    0,

      788,    0,  788,  788,  546,  549,  540,  560,  569,    0,
      788,    0,  788,    0,  788,  586,  594,    0,  582,    0,
        0,  595,  597,  591,  599,    0,    0,    0,    0,  788,
      788,  604,  616,  598,  788,  618,  617,  788,  621,  625,
      655,    0,  788,  635,  636,  647,  650,  671,    0,  788,
        0,    0,  788,  641,  657,    0,  679,  631,  658,    0,
      788,  670,  677,    0,  687,  688,  690,    0,  788,    0,
      788,  752,  757,   74,   71,  762,  767,  772,  777,  782
    } ;

static yyconst short int yy_def[281] =
    {   0,
      271,    1,  272,  272,  273,  273,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  271,  271,  271,
      276,  271,  277,  278,  271,  271,  279,  278,  271,  271,
      280,  271,  271,  271,  274,  274,  274,  271,  274,  274,
      271,  274,  271,  274,  274,  274,  271,  274,  274,  271,
      274,  274,  271,  274,  271,  274,  271,  274,  271,  274,
      271,  275,  275,  275,  275,  275,  275,  275,  271,  275,

      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      271,  275,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  276,  277,  271,  277,  278,  271,  271,  271,  271,
      271,  271,  271,  280,  274,  271,  274,  271,  271,  274,
      271,  274,  271,  271,  274,  271,  274,  271,  271,  274,
      271,  274,  271,  271,  274,  271,  274,  271,  271,  274,
      271,  274,  271,  274,  271,  275,  275,  275,  275,  275,
      271,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      271,  271,  275,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  274,  271,  274,  271,  271,  274,

      271,  274,  271,  271,  274,  271,  274,  271,  271,  274,
      271,  274,  271,  274,  271,  274,  271,  275,  275,  275,
      275,  275,  271,  275,  275,  275,  275,  275,  275,  271,
      271,  275,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  274,  271,  274,  271,  274,  271,  271,  274,  271,
      275,  275,  271,  275,  275,  275,  271,  274,  271,  274,
      271,  271,  275,  275,  274,  271,  275,  274,  271,  275,
        0,  271,  271,  271,  271,  271,  271,  271,  271,  271
    } ;

static yyconst short int yy_nxt[853] =
    {   0,
        8,    9,   10,   10,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   21,   22,   23,   24,   25,
       12,   26,   26,   27,   26,   28,   29,   26,   30,   31,
       32,   33,   34,   26,   26,   35,   26,   26,   36,    8,
        8,   37,   37,   38,   37,   39,   40,   37,   37,   41,
       42,   43,   44,   45,   37,   37,   46,   37,   37,   47,
       48,   49,   50,    8,   52,   52,   55,   55,   56,   56,
       53,   53,   62,   62,   69,   92,   66,   72,   65,   70,
      124,  125,   74,  194,   67,   64,   75,   63,   78,   61,
       76,   88,   60,   81,   79,   69,   66,   90,   72,   82,

       70,   84,   74,   57,   57,   67,   71,   75,   78,   86,
       73,   76,   88,   81,   93,   79,   68,   77,   90,  135,
       82,   84,   94,  140,   80,   89,   59,   58,   58,   83,
       86,   91,   95,  271,   93,   97,   85,   96,  271,   87,
      135,  100,   98,   94,  140,  101,  136,  107,  271,  102,
      141,  103,  271,   95,   68,   97,  147,  104,   96,  105,
      108,  100,  109,   98,   71,  106,  101,  107,  110,  271,
      102,  103,  112,   62,   62,   99,   77,  147,  104,  105,
      148,  108,   85,  109,  137,  138,  106,   80,  142,  110,
       87,  271,  271,  112,  271,   83,  111,  271,  136,  271,

      150,  271,  125,  271,  137,  138,   91,  113,  142,  143,
      271,  114,  115,  116,   73,  117,  118,  119,  128,  136,
      120,  150,  141,  145,  138,  139,  151,  113,  143,  143,
      146,  114,  115,  152,  116,   73,  117,  118,  119,  271,
      148,  120,  271,  141,  145,  155,  129,  121,  153,  144,
      130,  146,  151,  157,  152,  131,  158,  146,  132,  156,
      133,  148,  160,  153,  149,  161,  155,  162,  156,  153,
      163,  167,  164,  151,  157,  165,  271,  158,  154,  158,
      156,  169,  159,  160,  271,  271,  161,  162,  166,  168,
      163,  167,  161,  164,  271,  161,  165,  170,  171,  172,

      271,  169,  173,  163,  176,  165,  163,  175,  165,  166,
      168,  138,  179,  174,  177,  136,  141,  178,  170,  171,
      172,  143,  183,  173,  180,  176,  148,  156,  175,  171,
      171,  163,  179,  146,  174,  177,  195,  153,  178,  151,
      158,  136,  181,  183,  146,  180,  138,  161,  163,  181,
      151,  163,  271,  156,  187,  165,  195,  163,  158,  141,
      165,  271,  136,  181,  271,  146,  138,  182,  136,  143,
      197,  151,  196,  198,  156,  187,  184,  163,  146,  158,
      141,  165,  196,  196,  188,  148,  186,  202,  271,  143,
      271,  197,  198,  185,  198,  200,  271,  198,  271,  271,

      198,  203,  196,  196,  271,  271,  148,  202,  271,  189,
      190,  271,  271,  198,  163,  200,  146,  165,  196,  199,
      187,  203,  201,  191,  192,  203,  148,  156,  271,  205,
      190,  201,  206,  203,  163,  201,  207,  146,  165,  203,
      208,  187,  201,  210,  191,  192,  211,  148,  156,  205,
      193,  271,  206,  203,  206,  201,  211,  207,  201,  212,
      208,  208,  213,  216,  210,  206,  208,  211,  206,  218,
      208,  204,  211,  271,  206,  211,  214,  211,  215,  217,
      212,  208,  220,  213,  216,  211,  221,  219,  271,  218,
      209,  213,  222,  271,  213,  217,  223,  214,  271,  215,

      217,  224,  220,  271,  225,  196,  221,  215,  219,  215,
      226,  217,  227,  222,  198,  228,  271,  223,  201,  223,
      229,  224,  230,  223,  203,  225,  271,  230,  232,  217,
      215,  226,  215,  227,  208,  271,  228,  206,  213,  211,
      229,  211,  230,  271,  213,  201,  215,  230,  271,  232,
      217,  215,  213,  215,  198,  211,  230,  238,  230,  213,
      217,  233,  211,  231,  242,  201,  203,  203,  246,  243,
      235,  243,  271,  213,  208,  198,  211,  238,  198,  244,
      271,  234,  245,  271,  235,  242,  203,  203,  247,  246,
      243,  243,  243,  238,  271,  208,  243,  247,  243,  198,

      244,  247,  245,  245,  236,  237,  203,  245,  239,  247,
      245,  249,  240,  215,  208,  211,  251,  198,  247,  250,
      252,  247,  253,  245,  254,  271,  203,  255,  239,  256,
      248,  249,  243,  240,  215,  208,  211,  251,  198,  250,
      252,  250,  253,  243,  241,  254,  247,  250,  255,  256,
      250,  243,  245,  243,  245,  250,  253,  271,  253,  243,
      247,  250,  271,  258,  259,  250,  265,  247,  271,  263,
      250,  260,  243,  271,  261,  245,  271,  250,  243,  247,
      250,  264,  245,  247,  258,  259,  250,  265,  245,  243,
      263,  260,  266,  266,  261,  261,  259,  259,  271,  259,

      250,  264,  259,  261,  247,  266,  271,  259,  261,  245,
      243,  261,  267,  271,  266,  261,  257,  271,  261,  266,
      259,  268,  269,  261,  270,  271,  266,  271,  259,  271,
      271,  266,  262,  267,  271,  271,  271,  271,  266,  271,
      262,  271,  268,  269,  271,  270,  271,  271,  269,  269,
      271,  269,   51,   51,   51,   51,   51,   54,   54,   54,
       54,   54,  122,  271,  122,  271,  122,  123,  271,  123,
      123,  123,  126,  271,  271,  126,  126,  127,  127,  127,
      127,  127,  134,  271,  134,  134,  134,    7,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,

      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271
    } ;

static yyconst short int yy_chk[853] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    4,    5,    6,    5,    6,
        3,    4,   21,   21,   28,  275,   27,   29,  274,   28,
       53,   53,   30,  124,   27,   25,   30,   24,   31,   18,
       30,   35,   15,   32,   31,   28,   27,   36,   29,   32,

       28,   33,   30,    5,    6,   27,   28,   30,   31,   34,
       29,   30,   35,   32,   38,   31,   27,   30,   36,   66,
       32,   33,   38,   69,   31,   35,   13,    5,    6,   32,
       34,   36,   39,    7,   38,   40,   33,   39,    0,   34,
       66,   41,   40,   38,   69,   41,   66,   44,    0,   41,
       69,   42,    0,   39,   38,   40,   76,   42,   39,   43,
       45,   41,   46,   40,   39,   43,   41,   44,   46,    0,
       41,   42,   47,   62,   62,   40,   41,   76,   42,   43,
       76,   45,   44,   46,   67,   68,   43,   42,   70,   46,
       45,  123,  123,   47,    0,   43,   46,    0,   68,    0,

       78,  125,  125,    0,   67,   68,   47,   49,   70,   71,
        0,   49,   49,   49,   49,   49,   49,   49,   57,   68,
       49,   78,   71,   75,   67,   68,   78,   49,   70,   71,
       77,   49,   49,   79,   49,   49,   49,   49,   49,    0,
       77,   49,    0,   71,   75,   81,   57,   49,   80,   71,
       57,   77,   80,   82,   79,   57,   83,   75,   57,   83,
       57,   77,   86,   79,   77,   87,   81,   88,   81,   80,
       89,   94,   90,   80,   82,   91,    0,   83,   80,   82,
       83,   96,   83,   86,    0,    0,   87,   88,   93,   95,
       89,   94,   86,   90,    0,   87,   91,   97,   99,  101,

        0,   96,  102,   88,  105,   90,   89,  104,   91,   93,
       95,   94,  109,  103,  106,   93,   95,  108,   97,   99,
      101,   96,  112,  102,  110,  105,  102,  105,  104,   97,
       99,  111,  109,  101,  103,  106,  135,  104,  108,  103,
      106,  113,  111,  112,  118,  110,  117,  108,  109,  110,
      114,  111,    0,  114,  119,  112,  135,  116,  119,  117,
      116,    0,  113,  111,    0,  118,  117,  111,  113,  120,
      137,  114,  135,  138,  114,  119,  114,  116,  118,  119,
      117,  116,  136,  139,  119,  120,  117,  142,    0,  120,
        0,  137,  139,  116,  138,  140,    0,  137,    0,    0,

      138,  143,  136,  139,    0,    0,  120,  142,    0,  120,
      121,    0,    0,  139,  121,  140,  121,  121,  136,  139,
      121,  143,  141,  121,  121,  142,  121,  121,    0,  145,
      121,  140,  146,  144,  121,  144,  147,  121,  121,  143,
      148,  121,  141,  152,  121,  121,  153,  121,  121,  145,
      121,    0,  146,  144,  149,  144,  154,  147,  141,  160,
      149,  148,  161,  164,  152,  145,  147,  153,  146,  166,
      148,  144,  152,    0,  149,  153,  162,  154,  163,  165,
      160,  149,  168,  161,  164,  154,  169,  167,    0,  166,
      149,  160,  170,    0,  161,  164,  171,  162,    0,  163,

      165,  172,  168,    0,  173,  166,  169,  162,  167,  163,
      175,  165,  178,  170,  167,  179,    0,  171,  168,  170,
      180,  172,  181,  171,  169,  173,    0,  182,  183,  185,
      185,  175,  182,  178,  173,    0,  179,  172,  187,  175,
      180,  187,  181,    0,  178,  186,  179,  182,    0,  183,
      185,  185,  188,  182,  186,  188,  180,  191,  181,  187,
      183,  185,  187,  182,  197,  186,  189,  190,  207,  198,
      187,  199,    0,  188,  189,  186,  188,  191,  190,  205,
        0,  186,  206,    0,  188,  197,  189,  190,  208,  207,
      198,  197,  199,  191,    0,  189,  198,  209,  199,  190,

      205,  207,  209,  206,  189,  190,  193,  205,  193,  208,
      206,  216,  193,  193,  193,  193,  219,  193,  209,  217,
      222,  208,  223,  209,  224,    0,  193,  225,  193,  232,
      209,  216,  234,  193,  193,  193,  193,  219,  193,  217,
      222,  233,  223,  219,  193,  224,  236,  216,  225,  232,
      240,  237,  224,  234,  239,  217,  222,    0,  223,  234,
      225,  233,    0,  244,  245,  232,  258,  236,    0,  254,
      240,  246,  237,    0,  247,  239,    0,  233,  237,  236,
      241,  255,  239,  241,  244,  245,  240,  258,  241,  241,
      254,  246,  258,  259,  247,  248,  244,  245,    0,  248,

      241,  255,  254,  257,  241,  262,    0,  257,  246,  241,
      241,  247,  263,    0,  259,  248,  241,    0,  255,  259,
      248,  265,  266,  257,  267,    0,  262,    0,  257,    0,
        0,  262,  248,  263,    0,    0,    0,    0,  263,    0,
      257,    0,  265,  266,    0,  267,    0,    0,  265,  266,
        0,  267,  272,  272,  272,  272,  272,  273,  273,  273,
      273,  273,  276,    0,  276,    0,  276,  277,    0,  277,
      277,  277,  278,    0,    0,  278,  278,  279,  279,  279,
      279,  279,  280,    0,  280,  280,  280,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,

      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static yyconst short int yy_rule_linenum[61] =
    {   0,
       91,   92,   93,   94,   95,   96,   97,   98,   99,  100,
      101,  102,  103,  104,  109,  116,  124,  131,  136,  142,
      143,  144,  145,  153,  162,  168,  169,  170,  171,  172,
      173,  174,  175,  176,  177,  178,  179,  180,  181,  182,
      183,  184,  185,  186,  191,  199,  207,  212,  222,  223,
      239,  248,  260,  261,  262,  263,  264,  265,  267,  274
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "cool.flex"
#define INITIAL 0
/*
 *  The scanner definition for COOL.
 */
/*
 *  Stuff enclosed in %{ %} in the first section is copied verbatim to the
 *  output, so headers and global definitions are placed here to be visible
 * to the code in the file.  Don't remove anything that was here initially
 */
#line 11 "cool.flex"
#include <cool-parse.h>
#include <stringtab.h>
#include <utilities.h>

/* The compiler assumes these identifiers. */
#define yylval cool_yylval
#define yylex  cool_yylex

/* Max size of string constants */
#define MAX_STR_CONST 1025
#define YY_NO_UNPUT   /* keep g++ happy */

extern FILE *fin; /* we read from this file */

/* define YY_INPUT so we read from the FILE fin:
 * This change makes it possible to use this scanner in
 * the Cool compiler.
 */
#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread( (char*)buf, sizeof(char), max_size, fin)) < 0) \
		YY_FATAL_ERROR( "read() in flex scanner failed");

char string_buf[MAX_STR_CONST]; /* to assemble string constants */
char *string_buf_ptr;

extern int curr_lineno;
extern int verbose_flag;

extern YYSTYPE cool_yylval;

/*
 *  Add Your own definitions here
 */

/*
 *  Define names for regular expressions here.
 */
/*  Globals used for start conditions
 *  https://westes.github.io/flex/manual/Start-Conditions.html 
 */
#define COMMENT 1

#define STRING 2

#line 717 "cool-lex.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 86 "cool.flex"


 /*
  *  Matches special syntax symbols
  */
#line 885 "cool-lex.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 272 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 788 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */

		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 61 )
				fprintf( stderr, "--accepting rule at line %d (\"%s\")\n",
				         yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 61 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 62 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 91 "cool.flex"
{return '{';}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 92 "cool.flex"
{return '}';}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 93 "cool.flex"
{return '(';}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 94 "cool.flex"
{return ')';}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 95 "cool.flex"
{return '+';}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 96 "cool.flex"
{return '-';}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 97 "cool.flex"
{return '*';}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 98 "cool.flex"
{return '/';}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 99 "cool.flex"
{return ':';}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 100 "cool.flex"
{return ';';}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 101 "cool.flex"
{return '.';}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 102 "cool.flex"
{return ',';}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 103 "cool.flex"
{return '=';}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 104 "cool.flex"
{return '<';}
	YY_BREAK
/*
  *  Keeps track of the curent line number being scanned
  */
case 15:
YY_RULE_SETUP
#line 109 "cool.flex"
{
  ++curr_lineno;
}
	YY_BREAK
/*
  *  Matches integer constants
  */
case 16:
YY_RULE_SETUP
#line 116 "cool.flex"
{
  cool_yylval.symbol = inttable.add_string(yytext);
  return (INT_CONST);
}
	YY_BREAK
/*
  *  Matches assignments
  */
case 17:
YY_RULE_SETUP
#line 124 "cool.flex"
{
  return (ASSIGN);
}
	YY_BREAK
/*
  *  One line comments
  */
case 18:
YY_RULE_SETUP
#line 131 "cool.flex"
{}
	YY_BREAK
/*
  *  Multi-line/nested comments
  */
case 19:
YY_RULE_SETUP
#line 136 "cool.flex"
{ BEGIN(COMMENT); }
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 137 "cool.flex"
{
  BEGIN(INITIAL);
  cool_yylval.error_msg = "EOF in comment";
  return (ERROR);
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 142 "cool.flex"
{}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 143 "cool.flex"
{}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 144 "cool.flex"
{ ++curr_lineno; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 145 "cool.flex"
{ 
  ++curr_lineno;
  BEGIN(INITIAL); 
}
	YY_BREAK
/*
  *  Unmatched multi-line comments
  */
case 24:
YY_RULE_SETUP
#line 153 "cool.flex"
{
  BEGIN(INITIAL);
  cool_yylval.error_msg = "Unmatched *)";
  return (ERROR);
}
	YY_BREAK
/*
  *  The multiple-character operators.
  */
case 25:
YY_RULE_SETUP
#line 162 "cool.flex"
{ return (DARROW); }
	YY_BREAK
/*
  *  Keywords are case-insensitive except for the values true and false,
  *  which must begin with a lower-case letter.
  */
case 26:
YY_RULE_SETUP
#line 168 "cool.flex"
{ return (CLASS); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 169 "cool.flex"
{ return (INHERITS); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 170 "cool.flex"
{ return (ELSE); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 171 "cool.flex"
{ return (IF); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 172 "cool.flex"
{ return (FI); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 173 "cool.flex"
{ return (IN); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 174 "cool.flex"
{ return (ISVOID); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 175 "cool.flex"
{ return (LET); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 176 "cool.flex"
{ return (LOOP); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 177 "cool.flex"
{ return (POOL); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 178 "cool.flex"
{ return (THEN); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 179 "cool.flex"
{ return (WHILE); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 180 "cool.flex"
{ return (CASE); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 181 "cool.flex"
{ return (ESAC); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 182 "cool.flex"
{ return (NEW); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 183 "cool.flex"
{ return (OF); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 184 "cool.flex"
{ return (NOT); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 185 "cool.flex"
{ return (BOOL_CONST); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 186 "cool.flex"
{ return (BOOL_CONST); }
	YY_BREAK
/*
  *  Matches Type identifiers besides self and SELF_TYPE
  */
case 45:
YY_RULE_SETUP
#line 191 "cool.flex"
{ 
  cool_yylval.symbol = idtable.add_string(yytext, yyleng);
  return (TYPEID); 
}
	YY_BREAK
/*
  *  Matches object identifiers
  */
case 46:
YY_RULE_SETUP
#line 199 "cool.flex"
{ 
  cool_yylval.symbol = idtable.add_string(yytext, yyleng);
  return (OBJECTID); 
}
	YY_BREAK
/*
  *  Whitespace
  */
case 47:
YY_RULE_SETUP
#line 207 "cool.flex"
{}
	YY_BREAK
/*
   *  Matches invalid characters and returns an error
   */
case 48:
YY_RULE_SETUP
#line 212 "cool.flex"
{
  cool_yylval.error_msg = yytext;
  return (ERROR);  
}
	YY_BREAK
/*
  *  String constants (C syntax)
  *  Escape sequence \c is accepted for all characters c. Except for 
  *  \n \t \b \f, the result is c.
  */
case 49:
YY_RULE_SETUP
#line 222 "cool.flex"
string_buf_ptr = string_buf; BEGIN(STRING);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 223 "cool.flex"
{ 
  /* 
   * Saw closing quote, check the length of the string buffer
   * and return an error if necessary
   */
  BEGIN(INITIAL);
  if (strlen(string_buf) > MAX_STR_CONST) {
    memset(string_buf, 0, sizeof(string_buf));
    cool_yylval.error_msg = "String constant too long";
    return (ERROR); 
  } else {
    *string_buf_ptr = '\0';
    cool_yylval.symbol = stringtable.add_string(string_buf);
    return (STR_CONST);
  } 
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 239 "cool.flex"
{
  /* 
   * Matches unterminated string constants
   */
  BEGIN(INITIAL);
  ++curr_lineno;
  cool_yylval.error_msg = "Unterminated string constant";
  return (ERROR); 
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 248 "cool.flex"
{
  /* 
   * Matches the literal null character and returns an error token
   */
  BEGIN(INITIAL);
  cool_yylval.error_msg = "String contains null character";
  return (ERROR); 
}
	YY_BREAK

/* 
   * Self explanatory, matches escape sequence exceptions
   */
case 53:
YY_RULE_SETUP
#line 260 "cool.flex"
*string_buf_ptr++ = '\n';
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 261 "cool.flex"
*string_buf_ptr++ = '\t';
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 262 "cool.flex"
*string_buf_ptr++ = '\r';
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 263 "cool.flex"
*string_buf_ptr++ = '\b';
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 264 "cool.flex"
*string_buf_ptr++ = '\f';
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 265 "cool.flex"
*string_buf_ptr++ = '0';
	YY_BREAK

case 59:
YY_RULE_SETUP
#line 267 "cool.flex"
{
  /* 
   * Matches a properly escaped newline character inside a string
   */
  ++curr_lineno;
  *string_buf_ptr++ = yytext[1]; 
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 274 "cool.flex"
{
  /* 
   * Eats up the remainder of a valid string constant
   */
  char *yptr = yytext;
  while ( *yptr )
    *string_buf_ptr++ = *yptr++;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 282 "cool.flex"
ECHO;
	YY_BREAK
#line 1409 "cool-lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 64);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 272 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 64;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 272 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 271);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef _WIN32
#include <unistd.h>
#else
#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 282 "cool.flex"

